basePath: /
definitions:
  db.Book:
    properties:
      author:
        type: string
      id:
        type: integer
      quantity:
        type: integer
      title:
        type: string
    type: object
  dto.CreateBookRequest:
    properties:
      author:
        type: string
      quantity:
        type: integer
      title:
        type: string
    required:
    - author
    - quantity
    - title
    type: object
info:
  contact: {}
  description: API for managing books
  title: Book API
  version: "1.0"
paths:
  /books:
    get:
      description: Returns a list of all books in the catalog
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Book'
            type: array
      summary: List all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book entry
      parameters:
      - description: Book to add
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/db.Book'
      summary: Add a new book
      tags:
      - books
  /books/{id}:
    get:
      description: Returns a single book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Book'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a book by ID
      tags:
      - books
  /checkout:
    patch:
      description: Decrease the quantity of the specified book by 1
      parameters:
      - description: Book ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Book'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Checkout a book
      tags:
      - books
  /health:
    get:
      description: Returns 200 if server is healthy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health Check
      tags:
      - Health
  /ping:
    get:
      description: Responds with "pong"
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Ping
      tags:
      - Health
  /return:
    patch:
      description: Increase the quantity of the specified book by 1
      parameters:
      - description: Book ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Book'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Return a book
      tags:
      - books
swagger: "2.0"
